package cn.et.lesson05.xml;

import java.io.IOException;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

import org.apache.ibatis.cache.Cache;

import cn.et.lesson05.JavaRedis;

import redis.clients.jedis.Jedis;

public class RedisCache implements Cache {
	
	
	/**
	 * 操作redis对象
	 */
	Jedis jedis=new Jedis("localhost",6379);
	/*
	 * 缓存的ID
	 */
	private String cacheId;
	public RedisCache(String cacheId){
		this.cacheId=cacheId;
	}
	@Override
	public void clear() {
//		jedis.flushDB();

	}

	@Override
	public String getId() {
		// TODO Auto-generated method stub
		return cacheId;
	}
	/**
	 * mybatis自动调用getObject检测是否缓存中存在
	 */
	@Override
	public Object getObject(Object key) {
		byte[] bt=jedis.get(JavaRedis.objectToByteArray(key));
		try {
			if(bt==null){
				return null;
			}
			return JavaRedis.byteArrayToObject(bt);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public ReadWriteLock getReadWriteLock() {
		// TODO Auto-generated method stub
		return new ReentrantReadWriteLock();
	}

	@Override
	public int getSize() {
		// TODO Auto-generated method stub
		return 0;
	}
	/*
	 * mybatis读取数据时将数据库中读取的数据 通过putObject设置到缓存中
	 * 	 */
	@Override
	public void putObject(Object key, Object value) {
		//写入redis
		jedis.set(JavaRedis.objectToByteArray(key), JavaRedis.objectToByteArray(value));

	}
	/**
	 * mybatis 缓存策略 自动判断内存的的大小  绝对是否删除某些过期久远数据
	 */
	@Override
	public Object removeObject(Object key) {
		Object obj=getObject(key);
		jedis.del(JavaRedis.objectToByteArray(key));
		return obj;
	}

}
