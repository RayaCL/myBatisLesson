<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="cn.et.lesson04.xml.StudentMapper">
	
	
	<!-- if判断天剑是否满足,满足就if中的sql自动拼接到住sql
		where 自动判断第一个天剑是否存在where  如果没有where 追加同时去掉一个and
		trim 灵活度更高prefix配置的参数会被添加 在sql语句开始的地方
					prefixOverrides sql语句开始出现的参数会被覆盖
					
			<trim prefix="where" prefixOverrides="and"></trim>=======where
			
	 -->
  	<select id="queryStudent" resultType="student">
  	select * from student 
  	<trim prefix="where" prefixOverrides="and">
  	
  	<if test="sname!=null">
  		and sname like '%${sname}%'
  	</if>
  	<if test="address!=null">
  		and address like '%${address}%'
  	</if>
  </trim>
  	</select>
  	
  	<select id="queryBySex" resultType="student">
  	select * from student where 1=1
  	<choose>
  	<when test="sex!=null">
  		and sex=#{sex}
  	</when>
  	<otherwise>
  		and sex=1
  	</otherwise>
  	</choose>
  	</select>
  	<!-- 
  	set标签 动态去掉最后一个条件的,
  	
  	trim实现 <trim prefix="set" prefixOverrides="" suffixOverrides="," suffix=""></trim>
  	 -->
  	<update id="updateStudent">
  		update student
  		<set>
  		<if test="sname!=null">
  		sname=#{sname},
  		</if>
  		<if test="age!=null">
  		age=#{age},
  		</if>
  		<if test="sex!=null">
  		sex=#{sex}
  		</if>
  		</set>
  		where sid=#{sid}
  	</update>
  	<!-- foreach
  			open 表示循环开始之前 追加的sql
  			close 表示循环结束之后追加的sql
  			collection指定传入的集合
  			separator 非最后一次循环值上添加 分隔符,
  			item表示每一次循环的值被存储的变量名
  	 -->
  	<select id="queryStudentByGradeId" resultType="student">
  		select * from student
  		<foreach item="gid" collection="gradeList" open=" where gid in(" close=")" separator=",">
  		${g         id}
  		</foreach>
  	</select>
  	<!-- 添加学 生 -->
  	 	<sql id="key">
  		<trim suffixOverrides=",">
  		<if test="sid!=null">
  			sid,
  		</if>
  		<if test="sname!=null">
  			sname,
  		</if>
  		<if test="sex!=null">
  			sex,
  		</if>
  		<if test="age">
  			age,
  		</if>
  		<if test="address">
  			address,
  		</if>
  		</trim>
  	</sql>
  	<sql id="value">
  		<trim suffixOverrides=",">
  			<if test="sid!=null">
  			#{sid},
  		</if>
  		<if test="sname!=null">
  			#{sname},
  		</if>
  		<if test="sex!=null">
  			#{sex},
  		</if>
  		<if test="age">
  			#{age},
  		</if>
  		<if test="address">
  			#{address},
  		</if>
  		</trim>
  	</sql>
  	<insert id="insertStudent"  parameterType="student">
  		insert into student (<include refid="key"></include>) values (<include refid="value"></include>)
  	</insert>
  	
</mapper>